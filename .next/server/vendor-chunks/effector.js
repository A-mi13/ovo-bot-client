"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/effector";
exports.ids = ["vendor-chunks/effector"];
exports.modules = {

/***/ "(ssr)/./node_modules/effector/effector.mjs":
/*!********************************************!*\
  !*** ./node_modules/effector/effector.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   allSettled: () => (/* binding */ C),\n/* harmony export */   attach: () => (/* binding */ b),\n/* harmony export */   clearNode: () => (/* binding */ vt),\n/* harmony export */   combine: () => (/* binding */ m),\n/* harmony export */   createApi: () => (/* binding */ v),\n/* harmony export */   createDomain: () => (/* binding */ k),\n/* harmony export */   createEffect: () => (/* binding */ y),\n/* harmony export */   createEvent: () => (/* binding */ u),\n/* harmony export */   createNode: () => (/* binding */ n),\n/* harmony export */   createStore: () => (/* binding */ p),\n/* harmony export */   createStoreObject: () => (/* binding */ g),\n/* harmony export */   createWatch: () => (/* binding */ R),\n/* harmony export */   fork: () => (/* binding */ O),\n/* harmony export */   forward: () => (/* binding */ St),\n/* harmony export */   fromObservable: () => (/* binding */ w),\n/* harmony export */   guard: () => (/* binding */ $),\n/* harmony export */   hydrate: () => (/* binding */ q),\n/* harmony export */   is: () => (/* binding */ ne),\n/* harmony export */   launch: () => (/* binding */ i),\n/* harmony export */   merge: () => (/* binding */ S),\n/* harmony export */   restore: () => (/* binding */ z),\n/* harmony export */   sample: () => (/* binding */ x),\n/* harmony export */   scopeBind: () => (/* binding */ N),\n/* harmony export */   serialize: () => (/* binding */ D),\n/* harmony export */   setGraphInspector: () => (/* binding */ ge),\n/* harmony export */   setInspector: () => (/* binding */ ut),\n/* harmony export */   setStoreName: () => (/* binding */ l),\n/* harmony export */   split: () => (/* binding */ j),\n/* harmony export */   step: () => (/* binding */ Te),\n/* harmony export */   version: () => (/* binding */ Pt),\n/* harmony export */   withFactory: () => (/* binding */ ke),\n/* harmony export */   withRegion: () => (/* binding */ a)\n/* harmony export */ });\nfunction e(e, t) {\n    for(let r in e)t(e[r], r);\n}\nfunction t(e, t) {\n    e.forEach(t);\n}\nfunction r(e, t) {\n    if (!e) throw Error(t);\n}\nfunction a(e, t) {\n    let r = L(e).meta || {};\n    he = {\n        id: L(e).id,\n        parent: he,\n        value: e,\n        template: r.template || be(),\n        sidRoot: r.sidRoot || he && he.sidRoot,\n        meta: r\n    };\n    try {\n        return t();\n    } finally{\n        ye(\"region\"), he = V(he);\n    }\n}\nfunction n({ node: e = [], from: r, source: a, parent: n = r || a, to: i, target: o, child: l = i || o, scope: s = {}, meta: f = {}, family: d = {\n    type: \"regular\"\n}, regional: u } = {}) {\n    let c = Se(n), p = Se(d.links), m = Se(d.owners), g = [];\n    t(e, (e)=>e && le(g, e));\n    let h = {\n        id: pe(),\n        seq: g,\n        next: Se(l),\n        meta: f,\n        scope: s,\n        family: {\n            type: d.type || \"crosslink\",\n            links: p,\n            owners: m\n        }\n    };\n    return t(p, (e)=>le(T(e), h)), t(m, (e)=>le(B(e), h)), t(c, (e)=>le(e.next, h)), u && he && we(H(he), [\n        h\n    ]), h;\n}\nfunction i(e, r, a) {\n    let n, i = nt, o = null, l = et;\n    if (e.target && (r = e.params, a = e.defer, n = e.meta, i = \"page\" in e ? e.page : i, e.stack && (o = e.stack), l = G(e) || l, e = e.target), l && et && l !== et && (et = null), Array.isArray(e)) for(let t = 0; t < e.length; t++)Qe(\"pure\", i, L(e[t]), o, r[t], l, n);\n    else Qe(\"pure\", i, L(e), o, r, l, n);\n    if (a && !tt) return;\n    let s, f, d, u, c, p, m = {\n        isRoot: tt,\n        currentPage: nt,\n        scope: et,\n        isWatch: rt,\n        isPure: at\n    };\n    tt = 0;\n    e: for(; u = Ke();){\n        let { idx: e, stack: r, type: a } = u;\n        d = r.node, nt = c = r.page, et = G(r), c ? p = c.reg : et && (p = et.reg);\n        let n = !!c, i = !!et, o = {\n            fail: 0,\n            scope: d.scope\n        };\n        s = f = 0;\n        for(let t = e; t < d.seq.length && !s; t++){\n            let l = d.seq[t];\n            if (l.order) {\n                let { priority: n, barrierID: i } = l.order, o = i ? c ? `${c.fullID}_${i}` : i : 0;\n                if (t !== e || a !== n) {\n                    i ? Ze.has(o) || (Ze.add(o), Xe(t, r, n, i)) : Xe(t, r, n);\n                    continue e;\n                }\n                i && Ze.delete(o);\n            }\n            switch(l.type){\n                case \"mov\":\n                    {\n                        let e, t = l.data;\n                        switch(t.from){\n                            case P:\n                                e = H(r);\n                                break;\n                            case \"a\":\n                            case \"b\":\n                                e = r[t.from];\n                                break;\n                            case \"value\":\n                                e = t.store;\n                                break;\n                            case \"store\":\n                                if (p && !p[t.store.id]) if (n) {\n                                    let e = st(c, t.store.id);\n                                    r.page = c = e, e ? p = e.reg : i ? (pt(et, t.store, 0, 1, t.softRead), p = et.reg) : p = void 0;\n                                } else i && pt(et, t.store, 0, 1, t.softRead);\n                                e = We(p && p[t.store.id] || t.store);\n                        }\n                        switch(t.to){\n                            case P:\n                                r.value = e;\n                                break;\n                            case \"a\":\n                            case \"b\":\n                                r[t.to] = e;\n                                break;\n                            case \"store\":\n                                dt(c, et, d, t.target).current = e;\n                        }\n                        break;\n                    }\n                case \"compute\":\n                    let e1 = l.data;\n                    if (e1.fn) {\n                        rt = \"watch\" === J(d, \"op\"), at = e1.pure;\n                        let t = e1.safe ? (0, e1.fn)(H(r), o.scope, r) : mt(o, e1.fn, r);\n                        e1.filter ? f = !t : r.value = t, rt = m.isWatch, at = m.isPure;\n                    }\n            }\n            s = o.fail || f;\n        }\n        if (ft && ft(r, o), !s) {\n            let e = H(r), a = G(r);\n            if (t(d.next, (t)=>{\n                Qe(\"child\", c, t, r, e, a);\n            }), a) {\n                J(d, \"needFxCounter\") && Qe(\"child\", c, a.fxCount, r, e, a), J(d, \"storeChange\") && Qe(\"child\", c, a.storeChange, r, e, a), J(d, \"warnSerialize\") && Qe(\"child\", c, a.warnSerializeNode, r, e, a);\n                let n = a.additionalLinks[d.id];\n                n && t(n, (t)=>{\n                    Qe(\"child\", c, t, r, e, a);\n                });\n            }\n        }\n    }\n    tt = m.isRoot, nt = m.currentPage, et = G(m);\n}\nfunction o(t, r = \"combine\") {\n    let a = r + \"(\", n = \"\", i = 0;\n    return e(t, (e)=>{\n        i < 25 && (null != e && (a += n, a += X(e) ? Q(e).fullName : e.toString()), i += 1, n = \", \");\n    }), a + \")\";\n}\nfunction l(e, t) {\n    e.shortName = t, Object.assign(Q(e), s(t, V(e)));\n}\nfunction s(e, t) {\n    let r, a, n = e;\n    if (t) {\n        let n = Q(t);\n        0 === e.length ? (r = n.path, a = n.fullName) : (r = n.path.concat([\n            e\n        ]), a = 0 === n.fullName.length ? e : n.fullName + \"/\" + e);\n    } else r = 0 === e.length ? [] : [\n        e\n    ], a = e;\n    return {\n        shortName: n,\n        fullName: a,\n        path: r\n    };\n}\nfunction f(e, t) {\n    let r = t ? e : e[0];\n    ze(r);\n    let a = r.or, n = r.and;\n    if (n) {\n        let r = t ? n : n[0];\n        if (Me(r) && \"and\" in r) {\n            let r = f(n, t);\n            e = r[0], a = {\n                ...a,\n                ...r[1]\n            };\n        } else e = n;\n    }\n    return [\n        e,\n        a\n    ];\n}\nfunction d(e, ...t) {\n    let r = be();\n    if (r) {\n        let a = r.handlers[e];\n        if (a) return a(r, ...t);\n    }\n}\nfunction u(e, t) {\n    let r = gt({\n        or: t,\n        and: \"string\" == typeof e ? {\n            name: e\n        } : e\n    }), a = (e, ...t)=>(se(!J(a, \"derived\"), \"call of derived event\", \"createEvent\"), se(!at, \"unit call from pure function\", \"operators like sample\"), nt ? ((e, t, r, a)=>{\n            let n = nt, i = null;\n            if (t) for(i = nt; i && i.template !== t;)i = V(i);\n            lt(i);\n            let o = e.create(r, a);\n            return lt(n), o;\n        })(a, o, e, t) : a.create(e, t)), o = be(), l = Object.assign(a, {\n        graphite: n({\n            meta: $t(r.actualOp || \"event\", a, r),\n            regional: 1\n        }),\n        create: (e)=>(i({\n                target: a,\n                params: e,\n                scope: et\n            }), e),\n        watch: (e)=>Mt(a, e),\n        map: (e)=>zt(a, _, e, [\n                Le()\n            ]),\n        filter: (e)=>zt(a, \"filter\", e.fn ? e : e.fn, [\n                Le(qe, 1)\n            ]),\n        filterMap: (e)=>zt(a, \"filterMap\", e, [\n                Le(),\n                _e((e)=>!$e(e), 1)\n            ]),\n        prepend (e) {\n            let t = u(\"* → \" + a.shortName, {\n                parent: V(a)\n            });\n            return d(\"eventPrepend\", L(t)), wt(t, a, [\n                Le()\n            ], \"prepend\", e), xt(a, t), t;\n        }\n    });\n    return null != r && r.domain && r.domain.hooks.event(l), K(l, \"id\", l.graphite.id), ye(l.graphite), l;\n}\nfunction c(e, a, n, i) {\n    return Ce(n, a, \"first argument\"), r(xe(i), \"second argument should be a function\"), se(!J(e, \"derived\"), `${a} in derived store`, `${a} in store created via createStore`), t(Array.isArray(n) ? n : [\n        n\n    ], (t)=>{\n        e.off(t), U(e).set(t, kt(jt(t, e, \"on\", Oe, i)));\n    }), e;\n}\nfunction p(e, a) {\n    let o = gt(a), l = Be(e), s = u({\n        named: \"updates\",\n        derived: 1\n    });\n    d(\"storeBase\", l);\n    let f = l.id, m = {\n        subscribers: new Map,\n        updates: s,\n        defaultState: e,\n        stateRef: l,\n        getState () {\n            let e, t = l;\n            if (nt) {\n                let t = nt;\n                for(; t && !t.reg[f];)t = V(t);\n                t && (e = t);\n            }\n            return !e && et && (pt(et, l, 1), e = et), e && (t = e.reg[f]), We(t);\n        },\n        setState: (e)=>i({\n                target: m,\n                params: e,\n                defer: 1,\n                scope: et\n            }),\n        reset: (...e)=>(t(e, (e)=>c(m, \".reset\", e, ()=>m.defaultState)), m),\n        on: (e, t)=>c(m, \".on\", e, t),\n        off (e) {\n            let t = U(m).get(e);\n            return t && (t(), U(m).delete(e)), m;\n        },\n        map (e, t) {\n            let r, a;\n            Me(e) && (r = e, e = e.fn), se($e(t), \"second argument of store.map\", \"updateFilter\");\n            let n = m.getState();\n            be() ? a = null : $e(n) || (a = e(n, t));\n            let i = p(a, {\n                name: `${m.shortName} \\u2192 *`,\n                derived: 1,\n                and: r\n            }), o = jt(m, i, _, Ie, e);\n            return He(W(i), {\n                type: _,\n                fn: e,\n                from: l\n            }), W(i).noInit = 1, d(\"storeMap\", l, o), i;\n        },\n        watch (e, t) {\n            if (!t || !X(e)) {\n                let t = Mt(m, e);\n                return d(\"storeWatch\", l, e) || e(m.getState()), t;\n            }\n            return r(xe(t), \"second argument should be a function\"), e.watch((e)=>t(m.getState(), e));\n        }\n    }, g = $t(\"store\", m, o), h = m.defaultConfig.updateFilter;\n    m.graphite = n({\n        scope: {\n            state: l,\n            fn: h\n        },\n        node: [\n            _e((e, t, r)=>(r.scope && !r.scope.reg[l.id] && (r.b = 1), e)),\n            Pe(l),\n            _e((e, t, { a: r, b: a })=>!$e(e) && (e !== r || a), 1),\n            h && Le(Ie, 1),\n            Re({\n                from: P,\n                target: l\n            })\n        ],\n        child: s,\n        meta: {\n            ...g,\n            defaultState: e\n        },\n        regional: 1\n    }), K(m, \"id\", m.graphite.id), K(m, \"rootStateRefId\", f);\n    let y = J(m, \"serialize\"), b = J(m, \"derived\"), v = \"ignore\" === y, k = J(m, \"sid\");\n    return k && (K(m, \"storeChange\", 1), l.sid = k), k || v || b || K(m, \"warnSerialize\", 1), r(b || !$e(e), \"current state can't be undefined, use null instead\"), we(m, [\n        s\n    ]), null != o && o.domain && o.domain.hooks.store(m), b || (m.reinit = u({\n        named: \"reinit\"\n    }), m.reset(m.reinit)), l.meta = m.graphite.meta, ye(m.graphite), m;\n}\nfunction m(...e) {\n    let t, a, n;\n    [e, n] = f(e);\n    let i, o, l, s = e[e.length - 1];\n    if (xe(s) ? (a = e.slice(0, -1), t = s) : a = e, 1 === a.length) {\n        let e = a[0];\n        Z(e) || (i = e, o = 1);\n    }\n    if (!o && (i = a, t)) {\n        l = 1;\n        let e = t;\n        t = (t)=>e(...t);\n    }\n    return r(Me(i), \"shape should be an object\"), Ct(Array.isArray(i), !l, i, n, t);\n}\nfunction g(...e) {\n    return se(0, \"createStoreObject\", \"combine\"), m(...e);\n}\nfunction h() {\n    let e = {};\n    return e.req = new Promise((t, r)=>{\n        e.rs = t, e.rj = r;\n    }), e.req.catch(()=>{}), e;\n}\nfunction y(e, t = {}) {\n    let a = gt(xe(e) ? {\n        handler: e\n    } : e, t), o = u(xe(e) ? {\n        handler: e\n    } : e, {\n        ...t,\n        actualOp: \"effect\"\n    }), l = L(o);\n    K(l, \"op\", o.kind = \"effect\"), o.use = (e)=>(r(xe(e), \".use argument should be a function\"), g.scope.handler = e, o), o.use.getCurrent = ()=>g.scope.handler;\n    let s = o.finally = u({\n        named: \"finally\",\n        derived: 1\n    }), f = o.done = s.filterMap({\n        named: \"done\",\n        fn ({ status: e, params: t, result: r }) {\n            if (\"done\" === e) return {\n                params: t,\n                result: r\n            };\n        }\n    }), d = o.fail = s.filterMap({\n        named: \"fail\",\n        fn ({ status: e, params: t, error: r }) {\n            if (\"fail\" === e) return {\n                params: t,\n                error: r\n            };\n        }\n    }), c = o.doneData = f.map({\n        named: \"doneData\",\n        fn: ({ result: e })=>e\n    }), m = o.failData = d.map({\n        named: \"failData\",\n        fn: ({ error: e })=>e\n    }), g = n({\n        scope: {\n            handler: o.defaultConfig.handler || (()=>r(0, `no handler used in ${o.getType()}`))\n        },\n        node: [\n            _e((e, t, r)=>{\n                let a = t.handler, n = G(r);\n                if (n) {\n                    let e = n.handlers.unitMap.get(o) || n.handlers.sidMap[o.sid];\n                    e && (a = e);\n                }\n                return e.handler = a, e;\n            }, 0, 1),\n            _e(({ params: e, req: t, handler: r, args: a = [\n                e\n            ] }, n, i)=>{\n                let o = It(i), l = Ot(e, t, 1, s, i, o), f = Ot(e, t, 0, s, i, o), [d, u] = At(r, f, a);\n                d && (Me(u) && xe(u.then) ? u.then(l, f) : l(u));\n            }, 0, 1)\n        ],\n        meta: {\n            op: \"fx\",\n            fx: \"runner\"\n        }\n    });\n    l.scope.runner = g, le(l.seq, _e((e, { runner: t }, r)=>{\n        let a = V(r) ? {\n            params: e,\n            req: {\n                rs (e) {},\n                rj (e) {}\n            }\n        } : e;\n        return r.meta || (r.meta = {\n            fxID: me()\n        }), i({\n            target: t,\n            params: a,\n            defer: 1,\n            scope: G(r),\n            meta: r.meta\n        }), a.params;\n    }, 0, 1)), o.create = (e)=>{\n        let t = h(), r = {\n            params: e,\n            req: t\n        };\n        if (et && !rt) {\n            let e = et;\n            t.req.finally(()=>{\n                ot(e);\n            }).catch(()=>{});\n        }\n        return i({\n            target: o,\n            params: r,\n            scope: et\n        }), t.req;\n    };\n    let y = o.inFlight = p(0, {\n        serialize: \"ignore\",\n        named: (J(o, \"name\") || o.graphite.id) + \".inFlight\"\n    }).on(o, (e)=>e + 1).on(s, (e)=>e - 1).map({\n        fn: (e)=>e,\n        named: \"inFlight\"\n    });\n    K(s, \"needFxCounter\", \"dec\"), K(o, \"needFxCounter\", 1);\n    let b = o.pending = y.map({\n        fn: (e)=>e > 0,\n        named: \"pending\"\n    });\n    return we(o, [\n        s,\n        f,\n        d,\n        c,\n        m,\n        b,\n        y\n    ]), null != a && a.domain && a.domain.hooks.effect(o), o;\n}\nfunction b(e) {\n    let t;\n    [e, t] = f(e, 1);\n    let { source: r, effect: a, mapParams: n } = e, o = y(e, t);\n    K(o, \"attached\", 1);\n    let l, { runner: d } = L(o).scope, u = _e((e, t, a)=>{\n        let l, { params: s, req: f, handler: d } = e, u = o.finally, c = It(a), p = Ot(s, f, 0, u, a, c), m = a.a, g = te(d), h = 1;\n        if (n ? [h, l] = At(n, p, [\n            s,\n            m\n        ]) : l = r && g ? m : s, h) {\n            if (!g) return e.args = [\n                m,\n                l\n            ], 1;\n            i({\n                target: d,\n                params: {\n                    params: l,\n                    req: {\n                        rs: Ot(s, f, 1, u, a, c),\n                        rj: p\n                    }\n                },\n                page: a.page,\n                defer: 1,\n                meta: a.meta\n            });\n        }\n    }, 1, 1);\n    if (r) {\n        let e;\n        Z(r) ? (e = r, we(e, [\n            o\n        ])) : (e = m(r), we(o, [\n            e\n        ])), l = [\n            Pe(W(e)),\n            u\n        ];\n    } else l = [\n        u\n    ];\n    d.seq.splice(1, 0, ...l), o.use(a);\n    let c = V(a);\n    return c && (Object.assign(Q(o), s(o.shortName, c)), o.defaultConfig.parent = c), xt(a, o, \"effect\"), o;\n}\nfunction v(...t) {\n    let [[r, a], n] = f(t), i = {};\n    return e(a, (e, t)=>{\n        let a = i[t] = u(t, {\n            parent: V(r),\n            config: n\n        });\n        r.on(a, e), xt(r, a);\n    }), i;\n}\nfunction k(r, a) {\n    let o = gt({\n        or: a,\n        and: \"string\" == typeof r ? {\n            name: r\n        } : r\n    }), l = n({\n        family: {\n            type: \"domain\"\n        },\n        regional: 1,\n        parent: (null == o ? void 0 : o.domain) || (null == o ? void 0 : o.parent)\n    }), s = {\n        history: {},\n        graphite: l,\n        hooks: {}\n    };\n    l.meta = $t(\"domain\", s, {\n        parent: (null == o ? void 0 : o.domain) || (null == o ? void 0 : o.parent),\n        or: o\n    }), e({\n        Event: u,\n        Effect: y,\n        Store: p,\n        Domain: k\n    }, (e, r)=>{\n        let a = r.toLowerCase(), n = u({\n            named: `on${r}`\n        });\n        s.hooks[a] = n;\n        let o = new Set;\n        s.history[`${a}s`] = o, n.create = (e)=>(i(n, e), e), le(L(n).seq, _e((e, t, r)=>(r.scope = null, e))), n.watch((e)=>{\n            we(s, [\n                e\n            ]), o.add(e), e.ownerSet || (e.ownerSet = o), V(e) || (e.parent = s);\n        }), we(s, [\n            n\n        ]), s[`onCreate${r}`] = (e)=>(t(o, e), n.watch(e)), s[`create${r}`] = s[a] = (t, r)=>{\n            let a = gt({\n                and: r,\n                or: t\n            });\n            return null != a && a.domain ? e(t, r) : n(e(t, {\n                parent: s,\n                or: a\n            }));\n        };\n    });\n    let f = V(s);\n    return f && e(s.hooks, (e, t)=>wt(e, f.hooks[t])), null != o && o.domain && o.domain.hooks.domain(s), s;\n}\nfunction w(e) {\n    ze(e);\n    let t = E in e ? e[E]() : e;\n    r(t.subscribe, \"expect observable to have .subscribe\");\n    let a = u(), n = kt(a);\n    return t.subscribe({\n        next: a,\n        error: n,\n        complete: n\n    }), a;\n}\nfunction S(e, t) {\n    Ce(e, \"merge\", \"first argument\");\n    let r = u({\n        name: o(e, \"merge\"),\n        derived: 1,\n        and: t\n    });\n    return wt(e, r, [], \"merge\"), r;\n}\nfunction M(e, a) {\n    let n = 0;\n    return t(Nt, (t)=>{\n        t in e && (r(null != e[t], Dt(a, t)), n = 1);\n    }), n;\n}\nfunction x(...e) {\n    let t, r, a, n, [[i, o, l], s] = f(e), d = 1;\n    return $e(o) && Me(i) && M(i, \"sample\") && (o = i.clock, l = i.fn, d = !i.greedy, n = i.filter, t = i.target, r = i.name, a = i.sid, i = i.source), Rt(\"sample\", o, i, n, t, l, r, s, d, 1, 0, a);\n}\nfunction $(...e) {\n    let [[t, r], a] = f(e);\n    return r || (r = t, t = r.source), M(r, \"guard\"), Rt(\"guard\", r.clock, t, r.filter, r.target, null, r.name, a, !r.greedy, 0, 1);\n}\nfunction z(t, r, a) {\n    if (Z(t)) return se(0, \"restore($store)\"), t;\n    if (ee(t) || te(t)) {\n        let e = V(t), n = p(r, {\n            parent: e,\n            name: t.shortName,\n            and: a\n        });\n        return wt(te(t) ? t.doneData : t, n), e && e.hooks.store(n), n;\n    }\n    let n = Array.isArray(t) ? [] : {};\n    return e(t, (e, t)=>n[t] = Z(e) ? e : p(e, {\n            name: t\n        })), n;\n}\nfunction j(...t) {\n    let a, i, o = \"split\", [[l, s], c] = f(t), p = !s;\n    p && (a = l.cases, s = l.match, i = l.clock, l = l.source);\n    let m = Z(s), g = !X(s) && xe(s), h = !m && !g && Me(s);\n    r(X(l), \"source must be a unit\"), a || (a = {}), p ? e(a, (e, t)=>Ae(o, e, `cases.${t}`)) : (r(h, \"match should be an object\"), e(s, (e, t)=>a[t] = u({\n            derived: 1,\n            named: `cases.${t}`,\n            and: c\n        })), a.__ = u({\n        derived: 1,\n        named: \"cases.__\",\n        and: c\n    }));\n    let y, b = new Set([].concat(l, i || [], Object.values(a))), v = Object.keys(m || g ? a : s);\n    if (m || g) m && b.add(s), y = [\n        m && Pe(W(s), 0, 1),\n        Fe({\n            safe: m,\n            filter: 1,\n            pure: !m,\n            fn (e, t, r) {\n                let a = String(m ? r.a : s(e));\n                _t(t, ie(v, a) ? a : \"__\", e, r);\n            }\n        })\n    ];\n    else if (h) {\n        let t = Be({});\n        t.type = \"shape\";\n        let r, a = [];\n        e(s, (e, n)=>{\n            if (X(e)) {\n                r = 1, le(a, n), b.add(e);\n                let i = wt(e, [], [\n                    Pe(t),\n                    _e((e, t, { a: r })=>r[n] = e)\n                ]);\n                if (Z(e)) {\n                    t.current[n] = e.getState();\n                    let r = W(e);\n                    He(t, {\n                        from: r,\n                        field: n,\n                        type: \"field\"\n                    }), d(\"splitMatchStore\", r, i);\n                }\n            }\n        }), r && d(\"splitBase\", t), y = [\n            r && Pe(t, 0, 1),\n            Le((e, t, r)=>{\n                for(let n = 0; n < v.length; n++){\n                    let i = v[n];\n                    if (ie(a, i) ? r.a[i] : s[i](e)) return void _t(t, i, e, r);\n                }\n                _t(t, \"__\", e, r);\n            }, 1)\n        ];\n    } else r(0, \"expect match to be unit, function or object\");\n    let k = n({\n        meta: {\n            op: o\n        },\n        parent: i ? [] : l,\n        scope: a,\n        node: y,\n        family: {\n            owners: Array.from(b)\n        },\n        regional: 1\n    });\n    if (i && Rt(o, i, l, null, k, null, o, c, 0, 0, 0), !p) return a;\n}\nfunction C(e, { scope: t, params: r } = {}) {\n    if (!X(e)) return Promise.reject(new Error(\"first argument should be unit\"));\n    if (!(te(e) || ee(e) || Z(e) || ae(e))) return Promise.reject(new Error(\"first argument accepts only effects, events, stores or scopes\"));\n    ae(e) && (t = e);\n    let a = h();\n    a.parentFork = et;\n    let { fxCount: n } = t;\n    le(n.scope.defers, a);\n    let o = [], l = [];\n    return ae(e) || (le(o, e), le(l, te(e) ? {\n        params: r,\n        req: {\n            rs (e) {\n                a.value = {\n                    status: \"done\",\n                    value: e\n                };\n            },\n            rj (e) {\n                a.value = {\n                    status: \"fail\",\n                    value: e\n                };\n            }\n        }\n    } : r)), le(o, n), le(l, null), i({\n        target: o,\n        params: l,\n        scope: t\n    }), a.req;\n}\nfunction A(e, r, a) {\n    let n = [];\n    (function e(i) {\n        ie(n, i) || (le(n, i), \"store\" === J(i, \"op\") && (a || J(i, \"sid\")) && r(i, J(i, \"sid\")), t(i.next, e), t(T(i), e), t(B(i), e));\n    })(e);\n}\nfunction I(e, a) {\n    let n = Array.isArray(e) ? new Map(e) : e, i = new Map, o = 0;\n    if (n instanceof Map) {\n        let e = {};\n        return t(n, (t, n)=>{\n            r(X(n), \"Map key should be a unit\"), a && a(n, t), n.sid && (n.sid in e && (o = 1), e[n.sid] = t), i.set(n, t);\n        }), {\n            sidMap: e,\n            unitMap: i,\n            hasSidDoubles: o\n        };\n    }\n    return {\n        sidMap: n,\n        unitMap: i\n    };\n}\nfunction O(e, a) {\n    let i, o = e;\n    re(e) && (i = e, o = a);\n    let l = ((e)=>{\n        let r = n({\n            scope: {\n                defers: [],\n                inFlight: 0,\n                fxID: 0\n            },\n            node: [\n                _e((e, t, r)=>{\n                    V(r) ? \"dec\" === J(V(r).node, \"needFxCounter\") ? t.inFlight -= 1 : (t.inFlight += 1, t.fxID += 1) : t.fxID += 1;\n                }),\n                Fe({\n                    priority: \"sampler\",\n                    batch: 1\n                }),\n                _e((e, r)=>{\n                    let { defers: a, fxID: n } = r;\n                    r.inFlight > 0 || 0 === a.length || Promise.resolve().then(()=>{\n                        r.fxID === n && t(a.splice(0, a.length), (e)=>{\n                            ot(e.parentFork), e.rs(e.value);\n                        });\n                    });\n                }, 0, 1)\n            ]\n        }), a = n({\n            node: [\n                _e((e, t, r)=>{\n                    let a = V(r);\n                    if (a) {\n                        let t = a.node;\n                        if (!J(t, \"isCombine\") || V(a) && \"combine\" !== J(V(a).node, \"op\")) {\n                            let a = G(r), n = t.scope.state.id, i = J(t, \"sid\");\n                            a.sidIdMap[i] = n, a.values.sidMap[i] = e;\n                            let o = J(t, \"serialize\");\n                            o && a.sidSerializeSettings.set(i, \"ignore\" === o ? {\n                                ignore: 1\n                            } : {\n                                ignore: 0,\n                                write: o.write\n                            });\n                        }\n                    }\n                })\n            ]\n        }), i = n({\n            node: [\n                _e((e, t, r)=>{\n                    let a = G(r);\n                    if (a) {\n                        let e = V(r);\n                        e && (!J(e.node, \"isCombine\") || V(e) && \"combine\" !== J(V(e).node, \"op\")) && (a.warnSerialize = 1);\n                    }\n                })\n            ]\n        }), o = {\n            cloneOf: e,\n            reg: {},\n            values: {\n                sidMap: {},\n                idMap: {}\n            },\n            sidIdMap: {},\n            sidSerializeSettings: new Map,\n            getState (e) {\n                if (\"current\" in e) return dt(nt, o, null, e).current;\n                let t = L(e);\n                return dt(nt, o, t, t.scope.state, 1).current;\n            },\n            kind: \"scope\",\n            graphite: n({\n                family: {\n                    type: \"domain\",\n                    links: [\n                        r,\n                        a,\n                        i\n                    ]\n                },\n                meta: {\n                    unit: \"fork\"\n                },\n                scope: {\n                    forkInFlightCounter: r\n                }\n            }),\n            additionalLinks: {},\n            handlers: {\n                sidMap: {},\n                unitMap: new Map\n            },\n            fxCount: r,\n            storeChange: a,\n            warnSerializeNode: i,\n            activeEffects: []\n        };\n        return o;\n    })(i);\n    if (o) {\n        let e = o.scope;\n        if (e) {\n            let r = e.activeEffects;\n            e.activeEffects = [], l.activeEffects = r, t(r, (e)=>e.ref = l);\n        }\n        if (o.values) {\n            let { sidMap: e, unitMap: a, hasSidDoubles: n } = I(o.values, (e)=>r(Z(e), \"Values map can contain only stores as keys\"));\n            Object.assign(l.values.sidMap, e), t(a, (e, t)=>{\n                l.values.idMap[t.stateRef.id] = e;\n            }), l.fromSerialize = !(Array.isArray(o.values) || o.values instanceof Map), l.hasSidDoubles = n;\n        }\n        o.handlers && (l.handlers = I(o.handlers, (e)=>r(te(e), \"Handlers map can contain only effects as keys\")));\n    }\n    return l;\n}\nfunction q(e, { values: a }) {\n    r(Me(a), \"values property should be an object\");\n    let { sidMap: n, unitMap: o } = I(a), l = Object.getOwnPropertyNames(n), s = {};\n    t(o, (e, t)=>{\n        s[t.stateRef.id] = t;\n    });\n    let f, d, u, c = [], p = [];\n    ae(e) ? (f = e, u = 1, r(f.cloneOf, \"scope should be created from domain\"), d = L(f.cloneOf)) : re(e) ? d = L(e) : r(0, \"first argument of hydrate should be domain or scope\"), A(d, (e, t)=>{\n        if (t && ie(l, t)) {\n            le(c, e);\n            let r = J(e, \"serialize\");\n            r && \"ignore\" !== r && (n[t] = r.read(n[t])), le(p, n[t]);\n        } else e.scope.state.id in s && (le(c, e), le(p, o.get(s[e.scope.state.id])));\n    }, 1), i({\n        target: c,\n        params: p,\n        scope: f\n    }), u && Object.assign(f.values.sidMap, n);\n}\nfunction N(e, { scope: t, safe: a } = {}) {\n    r(t || et || a, \"scopeBind cannot be called outside of forked .watch\");\n    let n = t || et;\n    return te(e) ? (t)=>{\n        let r = h();\n        return i({\n            target: e,\n            params: {\n                params: t,\n                req: r\n            },\n            scope: n\n        }), r.req;\n    } : (t)=>(i({\n            target: e,\n            params: t,\n            scope: n\n        }), t);\n}\nfunction D(t, a = {}) {\n    t.warnSerialize && console.error(\"There is a store without sid in this scope, its value is omitted\"), r(!t.hasSidDoubles, \"duplicate sid found in this scope\");\n    let n = a.ignore ? a.ignore.map(({ sid: e })=>e) : [], i = {};\n    return e(t.values.sidMap, (e, r)=>{\n        var a;\n        if (ie(n, r)) return;\n        let o = t.sidIdMap[r], l = null !== (a = t.sidSerializeSettings.get(r)) && void 0 !== a ? a : {\n            ignore: 0,\n            write: Lt\n        };\n        l.ignore || (i[r] = (0, l.write)(o && o in t.reg ? t.reg[o].current : e));\n    }), \"onlyChanges\" in a && !a.onlyChanges && (r(t.cloneOf, \"scope should be created from domain\"), A(L(t.cloneOf), (e, r)=>{\n        r in i || ie(n, r) || J(e, \"isCombine\") || \"ignore\" === J(e, \"serialize\") || (i[r] = t.getState(e));\n    })), i;\n}\nfunction R({ unit: e, fn: t, scope: r }) {\n    let a = [\n        Te.run({\n            fn: (e)=>t(e)\n        })\n    ];\n    if (r) {\n        let t = n({\n            node: a\n        }), i = e.graphite.id, o = r.additionalLinks, l = o[i] || [];\n        return o[i] = l, l.push(t), F(()=>{\n            let e = l.indexOf(t);\n            -1 !== e && l.splice(e, 1), vt(t);\n        });\n    }\n    {\n        let t = n({\n            node: a,\n            parent: [\n                e\n            ],\n            family: {\n                owners: e\n            }\n        });\n        return F(()=>{\n            vt(t);\n        });\n    }\n}\nfunction F(e) {\n    let t = ()=>e();\n    return t.unsubscribe = ()=>e(), t;\n}\nlet E = \"undefined\" != typeof Symbol && Symbol.observable || \"@@observable\", _ = \"map\", P = \"stack\", L = (e)=>e.graphite || e, T = (e)=>e.family.owners, B = (e)=>e.family.links, W = (e)=>e.stateRef, H = (e)=>e.value, U = (e)=>e.subscribers, V = (e)=>e.parent, G = (e)=>e.scope, J = (e, t)=>L(e).meta[t], K = (e, t, r)=>L(e).meta[t] = r, Q = (e)=>e.compositeName, X = (e)=>(xe(e) || Me(e)) && \"kind\" in e;\nconst Y = (e)=>(t)=>X(t) && t.kind === e;\nlet Z = Y(\"store\"), ee = Y(\"event\"), te = Y(\"effect\"), re = Y(\"domain\"), ae = Y(\"scope\");\nvar ne = {\n    __proto__: null,\n    unit: X,\n    store: Z,\n    event: ee,\n    effect: te,\n    domain: re,\n    scope: ae,\n    attached: (e)=>te(e) && 1 == J(e, \"attached\")\n};\nlet ie = (e, t)=>e.includes(t), oe = (e, t)=>{\n    let r = e.indexOf(t);\n    -1 !== r && e.splice(r, 1);\n}, le = (e, t)=>e.push(t), se = (e, t, r)=>!e && console.error(`${t} is deprecated${r ? `, use ${r} instead` : \"\"}`);\nconst fe = ()=>{\n    let e = 0;\n    return ()=>\"\" + ++e;\n};\nlet de, ue = fe(), ce = fe(), pe = fe(), me = fe(), ge = (e)=>{\n    de = e;\n}, he = null, ye = (e)=>{\n    de && de(e, he);\n}, be = ()=>he && he.template, ve = (e)=>(e && he && he.sidRoot && (e = `${he.sidRoot}|${e}`), e), ke = ({ sid: e, name: t, loc: r, method: i, fn: o })=>a(n({\n        meta: {\n            sidRoot: ve(e),\n            sid: e,\n            name: t,\n            loc: r,\n            method: i,\n            type: \"factory\"\n        }\n    }), o), we = (e, r)=>{\n    let a = L(e);\n    t(r, (e)=>{\n        let t = L(e);\n        \"domain\" !== a.family.type && (t.family.type = \"crosslink\"), le(T(t), a), le(B(a), t);\n    });\n}, Se = (e = [])=>(Array.isArray(e) ? e : [\n        e\n    ]).flat().map(L), Me = (e)=>\"object\" == typeof e && null !== e, xe = (e)=>\"function\" == typeof e, $e = (e)=>void 0 === e, ze = (e)=>r(Me(e) || xe(e), \"expect first argument be an object\");\nconst je = (e, t, a, n)=>r(!(!Me(e) && !xe(e) || !(\"family\" in e) && !(\"graphite\" in e)), `${t}: expect ${a} to be a unit (store, event or effect)${n}`);\nlet Ce = (e, r, a)=>{\n    Array.isArray(e) ? t(e, (e, t)=>je(e, r, `${t} item of ${a}`, \"\")) : je(e, r, a, \" or array of units\");\n}, Ae = (e, r, a = \"target\")=>t(Se(r), (t)=>se(!J(t, \"derived\"), `${e}: derived unit in \"${a}\"`, \"createEvent/createStore\")), Ie = (e, { fn: t }, { a: r })=>t(e, r), Oe = (e, { fn: t }, { a: r })=>t(r, e), qe = (e, { fn: t })=>t(e);\nconst Ne = (e, t, r, a)=>{\n    let n = {\n        id: ce(),\n        type: e,\n        data: t\n    };\n    return r && (n.order = {\n        priority: r\n    }, a && (n.order.barrierID = ++De)), n;\n};\nlet De = 0, Re = ({ from: e = \"store\", store: t, target: r, to: a = r ? \"store\" : P, batch: n, priority: i })=>Ne(\"mov\", {\n        from: e,\n        store: t,\n        to: a,\n        target: r\n    }, i, n), Fe = ({ fn: e, batch: t, priority: r, safe: a = 0, filter: n = 0, pure: i = 0 })=>Ne(\"compute\", {\n        fn: e,\n        safe: a,\n        filter: n,\n        pure: i\n    }, r, t), Ee = ({ fn: e })=>Fe({\n        fn: e,\n        priority: \"effect\"\n    }), _e = (e, t, r)=>Fe({\n        fn: e,\n        safe: 1,\n        filter: t,\n        priority: r && \"effect\"\n    }), Pe = (e, t, r)=>Re({\n        store: e,\n        to: t ? P : \"a\",\n        priority: r && \"sampler\",\n        batch: 1\n    }), Le = (e = qe, t)=>Fe({\n        fn: e,\n        pure: 1,\n        filter: t\n    }), Te = {\n    mov: Re,\n    compute: Fe,\n    filter: ({ fn: e, pure: t })=>Fe({\n            fn: e,\n            filter: 1,\n            pure: t\n        }),\n    run: Ee\n}, Be = (e)=>({\n        id: ce(),\n        current: e\n    }), We = ({ current: e })=>e, He = (e, t)=>{\n    e.before || (e.before = []), le(e.before, t);\n}, Ue = null;\nconst Ve = (e, t)=>{\n    if (!e) return t;\n    if (!t) return e;\n    let r;\n    return (e.v.type === t.v.type && e.v.id > t.v.id || Ye(e.v.type) > Ye(t.v.type)) && (r = e, e = t, t = r), r = Ve(e.r, t), e.r = e.l, e.l = r, e;\n}, Ge = [];\nlet Je = 0;\nfor(; Je < 6;)le(Ge, {\n    first: null,\n    last: null,\n    size: 0\n}), Je += 1;\nconst Ke = ()=>{\n    for(let e = 0; e < 6; e++){\n        let t = Ge[e];\n        if (t.size > 0) {\n            if (3 === e || 4 === e) {\n                t.size -= 1;\n                let e = Ue.v;\n                return Ue = Ve(Ue.l, Ue.r), e;\n            }\n            1 === t.size && (t.last = null);\n            let r = t.first;\n            return t.first = r.r, t.size -= 1, r.v;\n        }\n    }\n}, Qe = (e, t, r, a, n, i, o)=>Xe(0, {\n        a: null,\n        b: null,\n        node: r,\n        parent: a,\n        value: n,\n        page: t,\n        scope: i,\n        meta: o\n    }, e), Xe = (e, t, r, a = 0)=>{\n    let n = Ye(r), i = Ge[n], o = {\n        v: {\n            idx: e,\n            stack: t,\n            type: r,\n            id: a\n        },\n        l: null,\n        r: null\n    };\n    3 === n || 4 === n ? Ue = Ve(Ue, o) : (0 === i.size ? i.first = o : i.last.r = o, i.last = o), i.size += 1;\n}, Ye = (e)=>{\n    switch(e){\n        case \"child\":\n            return 0;\n        case \"pure\":\n            return 1;\n        case \"read\":\n            return 2;\n        case \"barrier\":\n            return 3;\n        case \"sampler\":\n            return 4;\n        case \"effect\":\n            return 5;\n        default:\n            return -1;\n    }\n}, Ze = new Set;\nlet et, tt = 1, rt = 0, at = 0, nt = null, ot = (e)=>{\n    et = e;\n}, lt = (e)=>{\n    nt = e;\n};\nconst st = (e, t)=>{\n    if (e) {\n        for(; e && !e.reg[t];)e = V(e);\n        if (e) return e;\n    }\n    return null;\n};\nlet ft, dt = (e, t, r, a, n)=>{\n    let i = st(e, a.id);\n    return i ? i.reg[a.id] : t ? (pt(t, a, n), t.reg[a.id]) : a;\n}, ut = (e)=>{\n    ft = e;\n};\nconst ct = (e)=>e;\nlet pt = (e, r, a, n, i)=>{\n    var o;\n    let l = e.reg;\n    if (l[r.id]) return;\n    let s = r.sid, f = null == r || null === (o = r.meta) || void 0 === o ? void 0 : o.serialize, d = e.fromSerialize && \"ignore\" !== f && (null == f ? void 0 : f.read) || ct, u = {\n        id: r.id,\n        current: r.current,\n        meta: r.meta\n    };\n    if (u.id in e.values.idMap) u.current = e.values.idMap[u.id];\n    else if (s && s in e.values.sidMap && !(s in e.sidIdMap)) u.current = d(e.values.sidMap[s]);\n    else if (r.before && !i) {\n        let i = 0, o = a || !r.noInit || n;\n        t(r.before, (t)=>{\n            switch(t.type){\n                case _:\n                    {\n                        let r = t.from;\n                        if (r || t.fn) {\n                            r && pt(e, r, a, n);\n                            let i = r && l[r.id].current;\n                            o && (u.current = t.fn ? t.fn(i) : i);\n                        }\n                        break;\n                    }\n                case \"field\":\n                    i || (i = 1, u.current = Array.isArray(u.current) ? [\n                        ...u.current\n                    ] : {\n                        ...u.current\n                    }), pt(e, t.from, a, n), o && (u.current[t.field] = l[l[t.from.id].id].current);\n            }\n        });\n    }\n    s && (e.sidIdMap[s] = r.id), l[r.id] = u;\n};\nconst mt = (e, t, r)=>{\n    try {\n        return t(H(r), e.scope, r);\n    } catch (t) {\n        console.error(t), e.fail = 1, e.failReason = t;\n    }\n};\nlet gt = (t, r = {})=>(Me(t) && (gt(t.or, r), e(t, (e, t)=>{\n        $e(e) || \"or\" === t || \"and\" === t || (r[t] = e);\n    }), gt(t.and, r)), r);\nconst ht = (e, t)=>{\n    oe(e.next, t), oe(T(e), t), oe(B(e), t);\n}, yt = (e, t, r)=>{\n    let a;\n    e.next.length = 0, e.seq.length = 0, e.scope = null;\n    let n = B(e);\n    for(; a = n.pop();)ht(a, e), (t || r && \"sample\" !== J(e, \"op\") || \"crosslink\" === a.family.type) && yt(a, t, \"on\" !== J(a, \"op\") && r);\n    for(n = T(e); a = n.pop();)ht(a, e), r && \"crosslink\" === a.family.type && yt(a, t, \"on\" !== J(a, \"op\") && r);\n}, bt = (e)=>e.clear();\nlet vt = (e, { deep: t } = {})=>{\n    let r = 0;\n    if (e.ownerSet && e.ownerSet.delete(e), Z(e)) bt(U(e));\n    else if (re(e)) {\n        r = 1;\n        let t = e.history;\n        bt(t.events), bt(t.effects), bt(t.stores), bt(t.domains);\n    }\n    yt(L(e), !!t, r);\n}, kt = (e)=>{\n    let t = ()=>vt(e);\n    return t.unsubscribe = t, t;\n}, wt = (e, t, r, a, i)=>n({\n        node: r,\n        parent: e,\n        child: t,\n        scope: {\n            fn: i\n        },\n        meta: {\n            op: a\n        },\n        family: {\n            owners: [\n                e,\n                t\n            ],\n            links: t\n        },\n        regional: 1\n    }), St = (e)=>{\n    let t = \"forward\", [{ from: r, to: a }, i] = f(e, 1);\n    return Ce(r, t, '\"from\"'), Ce(a, t, '\"to\"'), Ae(t, a, \"to\"), kt(n({\n        parent: r,\n        child: a,\n        meta: {\n            op: t,\n            config: i\n        },\n        family: {},\n        regional: 1\n    }));\n}, Mt = (e, t)=>(r(xe(t), \".watch argument should be a function\"), kt(n({\n        scope: {\n            fn: t\n        },\n        node: [\n            Ee({\n                fn: qe\n            })\n        ],\n        parent: e,\n        meta: {\n            op: \"watch\"\n        },\n        family: {\n            owners: e\n        },\n        regional: 1\n    }))), xt = (e, t, r = \"event\")=>{\n    V(e) && V(e).hooks[r](t);\n}, $t = (e, t, r)=>{\n    let a = gt(r), n = \"domain\" === e, i = ue(), { sid: o = null, named: l = null, domain: f = null, parent: d = f } = a, u = l || a.name || (n ? \"\" : i), c = s(u, d), p = {\n        op: t.kind = e,\n        name: t.shortName = u,\n        sid: t.sid = ve(o),\n        named: l,\n        unitId: t.id = i,\n        serialize: a.serialize,\n        derived: a.derived,\n        config: a\n    };\n    if (t.parent = d, t.compositeName = c, t.defaultConfig = a, t.thru = (e)=>(se(0, \"thru\", \"js pipe\"), e(t)), t.getType = ()=>c.fullName, !n) {\n        t.subscribe = (e)=>(ze(e), t.watch(xe(e) ? e : (t)=>e.next && e.next(t))), t[E] = ()=>t;\n        let e = be();\n        e && (p.nativeTemplate = e);\n    }\n    return p;\n};\nconst zt = (e, t, r, a)=>{\n    let n;\n    Me(r) && (n = r, r = r.fn);\n    let i = u({\n        name: `${e.shortName} \\u2192 *`,\n        derived: 1,\n        and: n\n    });\n    return wt(e, i, a, t, r), i;\n}, jt = (e, t, r, a, n)=>{\n    let i = W(t), o = Re({\n        store: i,\n        to: \"a\",\n        priority: \"read\"\n    });\n    r === _ && (o.data.softRead = 1);\n    let l = [\n        o,\n        Le(a)\n    ];\n    return d(\"storeOnMap\", i, l, Z(e) && W(e)), wt(e, t, l, r, n);\n}, Ct = (t, a, n, i, l)=>{\n    let s = t ? (e)=>[\n            ...e\n        ] : (e)=>({\n            ...e\n        }), f = t ? [] : {}, u = s(f), c = Be(u), m = Be(1);\n    c.type = t ? \"list\" : \"shape\", c.noInit = 1, d(\"combineBase\", c, m);\n    let g = p(u, {\n        name: o(n),\n        derived: 1,\n        and: i\n    }), h = W(g);\n    h.noInit = 1, K(g, \"isCombine\", 1);\n    let y = Pe(c);\n    y.order = {\n        priority: \"barrier\"\n    };\n    let b = Re({\n        store: h,\n        to: \"b\",\n        priority: \"read\"\n    });\n    b.data.softRead = 1;\n    let v = [\n        _e((e, t, r)=>(r.scope && !r.scope.reg[c.id] && (r.c = 1), e)),\n        y,\n        Re({\n            store: m,\n            to: \"b\"\n        }),\n        _e((e, { key: t }, r)=>{\n            if (r.c || e !== r.a[t]) return a && r.b && (r.a = s(r.a)), r.a[t] = e, 1;\n        }, 1),\n        Re({\n            from: \"a\",\n            target: c\n        }),\n        Re({\n            from: \"value\",\n            store: 0,\n            target: m\n        }),\n        Re({\n            from: \"value\",\n            store: 1,\n            target: m,\n            priority: \"barrier\",\n            batch: 1\n        }),\n        Pe(c, 1),\n        l && Le(),\n        b\n    ];\n    return e(n, (e, t)=>{\n        if (!Z(e)) return r(!X(e) && !$e(e), `combine expects a store in a field ${t}`), void (u[t] = f[t] = e);\n        f[t] = e.defaultState, u[t] = e.getState();\n        let a = wt(e, g, v, \"combine\", l);\n        a.scope.key = t;\n        let n = W(e);\n        He(c, {\n            type: \"field\",\n            field: t,\n            from: n\n        }), d(\"combineField\", n, a);\n    }), g.defaultShape = n, He(h, {\n        type: _,\n        from: c,\n        fn: l\n    }), be() || (g.defaultState = l ? h.current = l(u) : f), g;\n};\nlet At = (e, t, r)=>{\n    try {\n        return [\n            1,\n            e(...r)\n        ];\n    } catch (e) {\n        return t(e), [\n            0,\n            null\n        ];\n    }\n}, It = (e)=>{\n    let t = G(e), r = {\n        ref: t\n    };\n    return t && le(t.activeEffects, r), r;\n}, Ot = (e, t, r, a, n, o)=>(l)=>{\n        o.ref && oe(o.ref.activeEffects, o), i({\n            target: [\n                a,\n                qt\n            ],\n            params: [\n                r ? {\n                    status: \"done\",\n                    params: e,\n                    result: l\n                } : {\n                    status: \"fail\",\n                    params: e,\n                    error: l\n                },\n                {\n                    value: l,\n                    fn: r ? t.rs : t.rj\n                }\n            ],\n            defer: 1,\n            page: n.page,\n            scope: o.ref,\n            meta: n.meta\n        });\n    };\nconst qt = n({\n    node: [\n        Ee({\n            fn: ({ fn: e, value: t })=>e(t)\n        })\n    ],\n    meta: {\n        op: \"fx\",\n        fx: \"sidechain\"\n    }\n}), Nt = [\n    \"source\",\n    \"clock\",\n    \"target\"\n], Dt = (e, t)=>e + `: ${t} should be defined`;\nlet Rt = (e, t, a, n, i, o, l, s, f, c, g, h)=>{\n    let y = !!i;\n    r(!$e(a) || !$e(t), Dt(e, \"either source or clock\"));\n    let b = 0;\n    $e(a) ? b = 1 : X(a) || (a = m(a)), $e(t) ? t = a : (Ce(t, e, \"clock\"), Array.isArray(t) && (t = S(t))), b && (a = t), s || l || (l = a.shortName);\n    let v = \"none\";\n    (g || n) && (X(n) ? v = \"unit\" : (r(xe(n), \"`filter` should be function or unit\"), v = \"fn\")), i ? (Ce(i, e, \"target\"), Ae(e, i)) : \"none\" === v && c && Z(a) && Z(t) ? i = p(o ? o(We(W(a)), We(W(t))) : We(W(a)), {\n        name: l,\n        sid: h,\n        or: s\n    }) : (i = u({\n        name: l,\n        derived: 1,\n        or: s\n    }), d(\"sampleTarget\", L(i)));\n    let k = Be(), w = [];\n    if (\"unit\" === v) {\n        let [r, a] = Et(n, i, t, k, e);\n        w = [\n            ...Ft(a),\n            ...Ft(r)\n        ];\n    }\n    let [M, x] = Et(a, i, t, k, e), $ = wt(t, i, [\n        d(\"sampleSourceLoader\"),\n        Re({\n            from: P,\n            target: k\n        }),\n        ...Ft(x),\n        Pe(M, 1, f),\n        ...w,\n        Pe(k),\n        \"fn\" === v && Le((e, t, { a: r })=>n(e, r), 1),\n        o && Le(Ie),\n        d(\"sampleSourceUpward\", y)\n    ], e, o);\n    return we(a, [\n        $\n    ]), Object.assign($.meta, s, {\n        joint: 1\n    }), i;\n};\nconst Ft = (e)=>[\n        Pe(e),\n        _e((e, t, { a: r })=>r, 1)\n    ], Et = (e, t, r, a, i)=>{\n    let o = Z(e), l = o ? W(e) : Be(), s = Be(o);\n    return o || n({\n        parent: e,\n        node: [\n            Re({\n                from: P,\n                target: l\n            }),\n            Re({\n                from: \"value\",\n                store: 1,\n                target: s\n            })\n        ],\n        family: {\n            owners: [\n                e,\n                t,\n                r\n            ],\n            links: t\n        },\n        meta: {\n            op: i\n        },\n        regional: 1\n    }), d(\"sampleSource\", s, l, a), [\n        l,\n        s\n    ];\n}, _t = (e, t, r, a)=>{\n    let n = e[t];\n    n && i({\n        target: n,\n        params: Array.isArray(n) ? n.map(()=>r) : r,\n        defer: 1,\n        stack: a\n    });\n}, Pt = \"22.8.7\", Lt = (e)=>e;\n //# sourceMappingURL=effector.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/effector/effector.mjs\n");

/***/ })

};
;